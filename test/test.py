# -*- coding: utf-8 -*-
# @Time    : 10/8/2022 1:55 am
# @Author  : Joseph Chen
# @Email   : josephchenhk@gmail.com
# @FileName: test.py

"""
Copyright (C) 2020 Joseph Chen - All Rights Reserved
You may use, distribute and modify this code under the
terms of the JXW license, which unfortunately won't be
written for another century.

You should have received a copy of the JXW license with
this file. If not, please write to: josephchenhk@gmail.com
"""
import os
import pyximport

import numpy as np
import pandas as pd
from finta import TA

# Ref: https://github.com/cython/cython/issues/1725
numpy_path = np.get_include()
os.environ['CFLAGS'] = "-I" + numpy_path
pyximport.install(setup_args={"include_dirs": numpy_path})

import qtalib.indicators as ta
import qtalib.py_indicators as pta

# Test data 1
opens = np.array([10.0, 15.0, 59.5, 32.0, 55.0])
highs = np.array([15.0, 18.0, 69.0, 35.0, 55.0])
lows = np.array([10.0, 12.0, 55.0, 29.5, 50.0])
closes = np.array([12.0, 14, 64.0, 32.0, 53.0])
volumes = np.array([1000, 500, 1200, 800, 2000])

# Test data 2
closes = np.array([
    1801, 1803, 1810, 1819, 1818, 1816, 1809, 1801, 1802, 1806, 1813,
    1813, 1810, 1816, 1808, 1813, 1809, 1816, 1818, 1820, 1811, 1806,
    1813, 1806, 1820, 1806, 1820, 1803, 1810, 1805, 1805, 1818, 1815,
    1813, 1810, 1806, 1810, 1814, 1811, 1818, 1820, 1817, 1801, 1809,
    1807, 1811, 1813, 1800, 1807, 1806, 1819, 1815, 1815, 1806, 1807,
    1820, 1817, 1807, 1810, 1804, 1819, 1820, 1810, 1800, 1802, 1806,
    1806, 1807, 1806, 1804, 1818, 1807, 1820, 1807, 1804, 1805, 1816,
    1807, 1805, 1801, 1813, 1810, 1801, 1805, 1808, 1809, 1819, 1805,
    1801, 1802, 1815, 1818, 1806, 1816, 1815, 1813, 1807, 1818, 1818,
    1803, 1813, 1804, 1802, 1807, 1817, 1813, 1812, 1811, 1800, 1809,
    1804, 1809, 1820, 1802, 1810, 1800, 1800, 1816, 1800, 1809, 1810,
    1810, 1820, 1813, 1818, 1801, 1803, 1804, 1814, 1815, 1804, 1819,
    1805, 1800, 1801, 1801, 1812, 1803, 1805, 1817, 1803, 1801, 1807,
    1813, 1805, 1816, 1805, 1803, 1818, 1820, 1804, 1807, 1811, 1816,
    1815, 1807, 1805, 1806, 1809, 1812, 1810, 1820, 1810, 1811, 1809,
    1807, 1812, 1810, 1801, 1814, 1802, 1805, 1800, 1820, 1807, 1817,
    1819, 1803, 1817, 1811]).astype(float)
opens = np.array([
    1800, 1801, 1803, 1810, 1819, 1818, 1816, 1809, 1801, 1802, 1806,
    1813, 1813, 1810, 1816, 1808, 1813, 1809, 1816, 1818, 1820, 1811,
    1806, 1813, 1806, 1820, 1806, 1820, 1803, 1810, 1805, 1805, 1818,
    1815, 1813, 1810, 1806, 1810, 1814, 1811, 1818, 1820, 1817, 1801,
    1809, 1807, 1811, 1813, 1800, 1807, 1806, 1819, 1815, 1815, 1806,
    1807, 1820, 1817, 1807, 1810, 1804, 1819, 1820, 1810, 1800, 1802,
    1806, 1806, 1807, 1806, 1804, 1818, 1807, 1820, 1807, 1804, 1805,
    1816, 1807, 1805, 1801, 1813, 1810, 1801, 1805, 1808, 1809, 1819,
    1805, 1801, 1802, 1815, 1818, 1806, 1816, 1815, 1813, 1807, 1818,
    1818, 1803, 1813, 1804, 1802, 1807, 1817, 1813, 1812, 1811, 1800,
    1809, 1804, 1809, 1820, 1802, 1810, 1800, 1800, 1816, 1800, 1809,
    1810, 1810, 1820, 1813, 1818, 1801, 1803, 1804, 1814, 1815, 1804,
    1819, 1805, 1800, 1801, 1801, 1812, 1803, 1805, 1817, 1803, 1801,
    1807, 1813, 1805, 1816, 1805, 1803, 1818, 1820, 1804, 1807, 1811,
    1816, 1815, 1807, 1805, 1806, 1809, 1812, 1810, 1820, 1810, 1811,
    1809, 1807, 1812, 1810, 1801, 1814, 1802, 1805, 1800, 1820, 1807,
    1817, 1819, 1803, 1817]).astype(float)
highs = np.array([
    1801., 1804.83, 1812.17, 1819., 1819., 1818., 1820.2,
    1809., 1806.63, 1806., 1813., 1813., 1813., 1816.,
    1819.82, 1813., 1817.39, 1818.77, 1818., 1821.48, 1820.,
    1811., 1814., 1813., 1820., 1821.75, 1822.78, 1821.62,
    1810., 1810., 1805., 1818., 1818., 1815.46, 1813.92,
    1810., 1811.28, 1814., 1814., 1818., 1820.67, 1820.,
    1817., 1809., 1810.93, 1811., 1814.15, 1813., 1808.15,
    1811.72, 1819., 1819.7, 1816.59, 1815., 1810.26, 1824.49,
    1823.12, 1817., 1810.87, 1810., 1819., 1821.03, 1821.89,
    1810., 1802., 1808.02, 1806., 1807., 1811.28, 1806.74,
    1818., 1821.59, 1821.67, 1820.12, 1807.08, 1806.19, 1816.,
    1816., 1807., 1805., 1813., 1813., 1812.47, 1807.04,
    1812.23, 1811.34, 1819., 1823.36, 1805., 1802.04, 1815.,
    1818.11, 1818., 1816., 1816., 1819.19, 1815.65, 1822.4,
    1821.22, 1818.72, 1813., 1814.41, 1804., 1808.09, 1817.58,
    1817., 1813., 1816.7, 1811., 1809., 1812.92, 1809.,
    1824.78, 1820., 1810.5, 1810., 1800., 1816., 1816.,
    1809., 1814.24, 1812.8, 1820., 1820.63, 1822.29, 1818.,
    1803., 1806.44, 1815.86, 1815., 1815.21, 1821.97, 1820.41,
    1808.69, 1803.27, 1801.51, 1812., 1812.16, 1805., 1817.,
    1817., 1803.17, 1807., 1815.61, 1814.62, 1817.6, 1816.,
    1805., 1818., 1820.78, 1823.5, 1807., 1815.73, 1816.,
    1820.75, 1818.4, 1807., 1806.85, 1809., 1814.86, 1812.,
    1820.08, 1824.33, 1811.56, 1812., 1810.73, 1812., 1812.,
    1814.94, 1814.22, 1817.3, 1805., 1808.03, 1823.18, 1824.05,
    1821.45, 1820.5, 1819., 1819.76, 1819.45]).astype(float)
lows = np.array([
    1800., 1798.68, 1799.38, 1809.71, 1818., 1816., 1809.,
    1797.98, 1801., 1802., 1802.94, 1809.37, 1807.81, 1810.,
    1808., 1806.4, 1809., 1809., 1811.05, 1818., 1806.66,
    1803.88, 1806., 1806., 1806., 1806., 1806., 1799.55,
    1800.66, 1805., 1805., 1800.39, 1815., 1809.11, 1806.5,
    1803.43, 1802.06, 1809.37, 1811., 1807.82, 1815.82, 1812.71,
    1801., 1798.91, 1807., 1802.54, 1811., 1795.51, 1800.,
    1805.91, 1805.53, 1813.7, 1813., 1803.22, 1806., 1807.,
    1817., 1807., 1807., 1802.63, 1799.85, 1815.24, 1808.96,
    1797.69, 1800., 1798.61, 1806., 1801.04, 1806., 1799.72,
    1804., 1807., 1806.84, 1807., 1803.84, 1804., 1805.,
    1807., 1804.81, 1798.33, 1799.51, 1809.3, 1801., 1797.48,
    1803.07, 1805.02, 1809., 1803.4, 1799.1, 1801., 1802.,
    1814.62, 1806., 1805.79, 1815., 1812.42, 1805.17, 1806.1,
    1818., 1803., 1803., 1804., 1801.98, 1802., 1807.,
    1813., 1808.18, 1807.82, 1800., 1800., 1801.63, 1804.,
    1809., 1802., 1802., 1800., 1800., 1800., 1799.15,
    1798.58, 1809., 1805.05, 1810., 1810.18, 1810.35, 1801.,
    1800.1, 1803., 1804., 1810.75, 1802.51, 1804., 1805.,
    1800., 1800., 1801., 1800.7, 1803., 1799.65, 1805.,
    1803., 1799.56, 1798.92, 1805.79, 1800.74, 1804.04, 1800.23,
    1799.32, 1799.44, 1818., 1804., 1803.21, 1807., 1811.,
    1810.44, 1805.32, 1805., 1802.74, 1803.49, 1809., 1806.18,
    1810., 1810., 1808.46, 1809., 1806.8, 1807., 1809.55,
    1801., 1799.95, 1802., 1802., 1796.54, 1798.5, 1807.,
    1806.89, 1814.65, 1800.59, 1801.15, 1807.27]).astype(float)
volumes = np.array([
    105, 218,  54,  40, 261, 180, 158, 128,  26, 136, 273, 212, 106,
    52, 195,  78, 288,  43, 158, 138,  72, 200, 118,  45, 291, 166,
    179,  76, 177, 272,  50,  92, 244, 106, 169,  57,  39,  25, 296,
    185, 233, 171, 105, 150, 147, 299, 151,  98,  96, 243,  75, 236,
    140, 260,  72,  28, 116,  53, 141,  70, 212, 148, 267, 198, 199,
    120, 295, 248, 129,  31, 187, 189,  21,  58, 185, 193,  93, 289,
    294, 278, 187,  64,  27, 268, 278, 194, 176, 230, 152, 114, 199,
    182, 270, 242, 177, 219, 134, 262,  50,  73, 137, 183, 169, 182,
    120, 246, 104,  58, 261,  81, 172, 194, 105, 172, 232, 207,  90,
    139,  56, 172, 115, 168, 126,  62, 200, 218, 151, 187,  50,  38,
    65,  33, 277, 215, 217, 200, 221, 263, 177,  67,  98,  68,  59,
    250, 284, 154, 126, 137, 197, 150,  78,  49, 192, 177, 202, 278,
    299,  73,  23, 252, 158, 288,  55,  81, 118, 264,  38,  60, 113,
    58,  27,  57,  84,  65,  26,  37, 233,  54, 247, 235]).astype(int)

ohlc = pd.DataFrame({
    "open": opens,
    "high": highs,
    "low": lows,
    "close": closes,
})

# print(TA.SMA(ohlc, 2))
# print(ta.SMA(closes, 2))
#
# print(TA.EMA(ohlc, 2))
# print(ta.EMA(closes, 2))
#
# print(TA.MACD(ohlc, period_fast=12, period_slow=26, signal=9))
# print(ta.MACD(closes, period_fast=12, period_slow=26, signal=9))

# print(TA.TR(ohlc))
# print(ta.TR(highs, lows, closes))

# print(TA.ATR(ohlc, 3))
# print(ta.ATR(highs, lows, closes, 3))

# print(TA.SAR(ohlc, 0.02, 0.2))
# print(ta.SAR(highs, lows, 0.02, 0.2))

# print(TA.ST(ohlc, 0.02, 0.2))
N = 10
super_trend = {}
py_super_trend = {}
for i in range(N):
    py_super_trend = pta.ST(
        py_super_trend,
        highs[i:i+N],
        lows[i:i + N],
        closes[i:i + N],
        10,
        3.0,
        1,
        0
    )
    super_trend = ta.ST(
        super_trend,
        highs[i:i+N],
        lows[i:i+N],
        closes[i:i+N],
        10,
        3.0
    )
    super_trend_fmt = {k.decode("utf-8"): v for k,v in super_trend.items()}
    check = py_super_trend == super_trend_fmt
    print(f"{i} {check}\n\t{py_super_trend}\n\t{super_trend_fmt}")

print()
